# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  image:
    repository: ""
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  releaseVersion: ""
  extraLabels:
    []
    # app.backbase.com/public: true
  env: {}

deployment:
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
    - name: management
      containerPort: 8081
      protocol: TCP

  # The update strategy to apply to the Deployment or DaemonSet
  strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxUnavailable: 0
  #   maxSurge: 25%

  ## Rollback limit
  ##
  annotations:
    {}
    # configmap.reloader.stakater.com/reload: platform-endpoints-dev

  revisionHistoryLimit: 3

  terminationGracePeriodSeconds: 60

  arguments: {}

  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsConfig: []
  # dnsConfig:
  #   nameservers:
  #     - 1.2.3.4
  #   searches:
  #     - test.test.com

  ## Additional environment variables to set
  # extraEnvs:
  #   - name: FOO
  #     valueFrom:
  #       secretKeyRef:
  #         key: FOO
  #         name: secret-resource
  extraEnvs: []
  #  envFrom:
  #    - configMapRef:
  #        name: special-config
  env: {}
  # BUILDINGBLOCKS_SECURITY_CSRF_ENABLED: "true"

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  startupProbe: {}
  # failureThreshold: 3
  # periodSeconds: 30
  # timeoutSeconds: 5
  # initialDelaySeconds: 15
  # httpGet:
  #   path: /__health
  #   port: http
  livenessProbe: {}
  # failureThreshold: 3
  # periodSeconds: 30
  # timeoutSeconds: 5
  # initialDelaySeconds: 15
  # httpGet:
  #   path: /__health
  #   port: http

  readinessProbe: {}
  # failureThreshold: 3
  # periodSeconds: 30
  # timeoutSeconds: 5
  # initialDelaySeconds: 15
  # httpGet:
  #   path: /__health
  #   port: http

  volumeMounts: []
  # - name: aws-iam-credentials
  #   mountPath: /meta/aws-iam
  #   readOnly: true

  volumes:
    []
    # - name: aws-iam-credentials
    #   secret:
    #     secretName: alb-ingress-controller-role

  ## Define an initcontainer, which are run before the app containers are started.
  initContainer:
    {}
    # name: "liquidbase"
    # image:
    #   repository: ""
    #   tag: ""
    # command:
    #   - "java"
    #   - "jar"
    # resources:
    #   requests:
    #     cpu: 250m
    #     memory: 512Mi
    #   limits:
    #     cpu: 500m
    #     memory: 1024Mi
    # env:
    #   - name: DB_HOST
    #     value: "123"
  ## Containers, which are run before the app containers are started.
  extraInitContainers: []
  # - name: init-myservice
  #   image: busybox
  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
  configmapExtra: ""

configMaps: []
# - name: mycm
#   mountPath: "/usr/src/app"
#   subPath: .env
#   readOnly: true
#   data:
#     foo: bar

secret: {}
# BUILDINGBLOCKS_SECURITY_CSRF_ENABLED: "true"

## Enable RBAC
rbac:
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

replicaCount: 1

# You must disable the kedaAutoscaling if HPA is enabled
# by setting the kedaAutoscaling.enabled to false
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# You must disable the HPA if this is enabled
# by setting the autoscaling.enabled to false
kedaAutoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  cooldownPeriod: 300
  # targetCPUUtilizationPercentage: 60
  # targetMemoryUtilizationPercentage: 50
  extraTriggers:
    []
    # - type: prometheus
    #   metadata:
    #     serverAddress: http://<prometheus-host>:9090
    #     metricName: http_requests_total # DEPRECATED: This parameter is deprecated as of KEDA v2.10 and will be removed in version 2.12
    #     threshold: "100"
    #     query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))
    #     authModes: "basic"
    #   authenticationRef:
    #     name: keda-prom-creds

service:
  nameOverride: ""
  type: ClusterIP
  port: 8080
  protocol: TCP
  targetPort: http
  additionalPorts: []
#      - name: myPort
#        port: myPortNumber
#        protocol: tcp
#        targetPort: myTargetPortName

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

pvc:
  enabled: false
  annotations: {}
  # volume.beta.kubernetes.io/storage-provisioner:
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: default
  path: /mount

metrics:
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)
    ##
    path: ""
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
    ##
    labels: {}
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
    ##
    selector: {}
    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
    ##
    jobLabel: ""
  ## Custom PrometheusRule to be defined
  ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
  ##